version: "3"

services:

  calendar:
 
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь 'server/' соответствует пути к папке сервера,
    # которая содержит соответствующий Dockerfile.

    # build: ../build/Dockerfile_calendar
    build:
      context: .
      dockerfile: Dockerfile_calendar

    # Команда, которую нужно запустить после создания образа.
    # Следующая команда означает запуск "python ./server.py".

    command: /opt/calendar/calendar-app -config /etc/calendar/config.toml

    # Вспомните о том, что в качестве порта в 'server/server.py' указан порт 1234.
    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 1234 и организовать его связь с портом
    # 1234 контейнера (так как именно на этот порт сервер 
    # ожидает поступления запросов).

    ports:
      # - 4242:4242
      - 4343:4343
    network_mode: host

  # Второй сервис (контейнер): клиент.
  # Этот сервис назван 'client'.

  client:
    build:
      context: .
      dockerfile: Dockerfile_client

    
  #   # Здесь 'client/ соответствует пути к папке, которая содержит
  #   # файл Dockerfile для клиентской части системы.

  #   build: client/

  #   # Команда, которую нужно запустить после создания образа.
  #   # Следующая команда означает запуск "python ./client.py".
 
  #   command: python ./client.py

  #   # Ключевое слово 'network_mode' используется для описания типа сети.
  #   # Тут мы указываем то, что контейнер может обращаться к 'localhost' компьютера.

    network_mode: host

  #   # Ключевое слово 'depends_on' позволяет указывать, должен ли сервис,
  #   # прежде чем запуститься, ждать, когда будут готовы к работе другие сервисы.
  #   # Нам нужно, чтобы сервис 'client' дождался бы готовности к работе сервиса 'server'.
 
    depends_on:
      - calendar